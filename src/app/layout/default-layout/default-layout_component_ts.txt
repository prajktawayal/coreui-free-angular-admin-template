import { Component,CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { RouterLink, RouterOutlet, Router } from '@angular/router';
import { NgScrollbar } from 'ngx-scrollbar';
import { NgStyle } from '@angular/common';
import { IconDirective } from '@coreui/icons-angular';
import { RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective } from '@coreui/angular';
import { ImgModule } from '@coreui/angular';
import { FormsModule,ReactiveFormsModule  } from '@angular/forms';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CommonModule } from '@angular/common';  // âœ… Import CommonModule
import { LoginService } from 'src/app/layout/default-layout/default-layout.service';
// import { IconDirective } from '@coreui/icons-angular';
import {
  AvatarModule,
  ContainerComponent,
  ShadowOnScrollDirective,
  SidebarBrandComponent,
  SidebarComponent,
  SidebarFooterComponent,
  SidebarHeaderComponent,
  SidebarNavComponent,
  SidebarToggleDirective,
  SidebarTogglerDirective,
  ButtonCloseDirective,
  ButtonDirective,
  ModalBodyComponent,
  ModalComponent,
  ModalFooterComponent,
  ModalHeaderComponent,
  ModalTitleDirective,
  ThemeDirective
} from '@coreui/angular';

import { DefaultFooterComponent, DefaultHeaderComponent } from './';
import { navItems } from './_nav';

function isOverflown(element: HTMLElement) {
  return (
    element.scrollHeight > element.clientHeight ||
    element.scrollWidth > element.clientWidth
  );
}

@Component({
  selector: 'app-dashboard',
  templateUrl: './default-layout.component.html',
  styleUrls: ['./default-layout.component.scss'],
  imports: [
    SidebarComponent,
    SidebarHeaderComponent,
    SidebarBrandComponent,
    SidebarNavComponent,
    SidebarFooterComponent,
    SidebarToggleDirective,
    SidebarTogglerDirective,
    ContainerComponent,
    DefaultFooterComponent,
    DefaultHeaderComponent,
    AvatarModule,
    // IconDirective,
    NgScrollbar,
    RouterOutlet,
    RouterLink,
    ImgModule,
    FormsModule,
    ReactiveFormsModule ,
    CommonModule,
    ShadowOnScrollDirective, ButtonDirective, ModalComponent, ModalHeaderComponent, ModalTitleDirective, ThemeDirective, ButtonCloseDirective, ModalBodyComponent, ModalFooterComponent,
    RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, IconDirective, FormControlDirective, NgStyle
  ],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class DefaultLayoutComponent {
  loginForm: FormGroup;
  submitted = false;
  errorMessage: string = '';

  public visible = false;

  toggleLiveDemo() {
    this.visible = !this.visible;

    if (!this.visible) {
      this.closeLoginModal();  // Reset form when modal is closed
    }
  }

  // Function to reset form fields
  closeLoginModal() {
    this.submitted = false;
    this.loginForm.reset();
  }

  handleLiveDemoChange(event: boolean) {
    this.visible = event;
  }

  constructor(private router: Router, private fb: FormBuilder) {
    this.loginForm = this.fb.group({
      username: ['', [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-Z0-9]+$')]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  // Getter for easy form control access
  get f() {
    return this.loginForm.controls;
  }

  // Dummy credentials
  private validUsers = [
    { username: 'admin', password: 'admin123' },
    { username: 'user1', password: 'password1' }
  ];

  login() {
    this.submitted = true;
    this.errorMessage = '';

    if (this.loginForm.invalid) {
      return;
    }

    const { username, password } = this.loginForm.value;
    const user = this.validUsers.find(u => u.username === username && u.password === password);

    if (user) {
      alert('Login successful!');
      this.router.navigate(['/master']); // Redirect to dashboard after login
      this.closeLoginModal();
    } else {
      this.errorMessage = 'Invalid username or password';
    }
  }
  // login() {
  //   console.log('Username:', this.username);
  //   console.log('Password:', this.password);

  //   const user = this.validUsers.find(u => u.username === this.username && u.password === this.password);
  //   if (user) {
  //     alert('Login successful!');
  //     this.router.navigate(['/master']); // Redirect to dashboard after login
  //     this.toggleLiveDemo();
  //   } else {
  //     this.errorMessage = 'Invalid username or password';
  //   }
  // }

  public navItems = [...navItems];
}
